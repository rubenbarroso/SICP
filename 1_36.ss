(define tolerance 0.00001)

(define (close-enough? x y)
  (< (abs (- x y)) 0.001))

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (display guess)
      (newline)
      (if (close-enough? guess next)
          guess
          (try next))))
  (try first-guess))

(define (x^x guess)
  (fixed-point (lambda (y) (/ (log 1000) (log y))) guess))

;(x^x 10.0)
;10.0
;3.0
;6.287709822868153
;3.7570797902002955
;5.218748919675316
;4.1807977460633134
;4.828902657081294
;4.386936895811028
;4.671722808746096
;4.481109436117821
;4.605567315585734
;4.522955348093165
;4.577201597629606
;4.5413257863574
;4.564940905198753
;4.5493479614754095
;4.5596228442307565
;4.552843114094703
;4.55731263660315
;4.554364381825887
;4.556308401465587
;4.555026226620339
;4.55587174038325
;4.555314115211184
;4.555681847896976
;4.555439330395129
;4.555599264136406
;4.555493789937456
;4.555563347820309
;4.5555174755279
;4.555547727376274
;4.555527776815261
;4.555540933824255 (33 guesses total)

;with average damping

(define (x^x-damping guess)
  (define (average m n) (/ (+ m n) 2))
  (fixed-point (lambda (y) (average y (/ (log 1000) (log y)))) guess))

;(x^x-damping 10.0)
;10.0
;6.5
;5.095215099176933
;4.668760681281611
;4.57585730576714
;4.559030116711325
;4.556131685205929
;4.555637206157649
;4.55555298754564
;4.555538647701617 (10 guesses total)
