(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((< (car set1) (car set2)) 
         (cons (car set1) (union-set (cdr set1) set2)))
        ((> (car set1) (car set2))
         (cons (car set2) (union-set set1 (cdr set2))))
        ((= (car set1) (car set2))
         (cons (car set1) (union-set (cdr set1) (cdr set2))))))

;(union-set (list 1 2 3) (list 4 5 6))
;(1 2 3 4 5 6)
;(union-set (list 4 5 6) (list 1 2 3))
;(1 2 3 4 5 6)
;(union-set (list 1 2 3) (list 1 2 3))
;(1 2 3)
;(union-set (list 7 10 15) (list 7 11 17))
;(7 10 11 15 17)
;(union-set (list 7 10 15) nil)
;(7 10 15)
;(union-set nil (list 7 10 15))
;(7 10 15)
;(union-set nil nil)
;()
;this is O(n) like intersection-set