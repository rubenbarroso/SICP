(define (let->combination exp)
  (let ((named-var (cadr exp))
        (named-let-exps (caddr exp))
        (named-body (cdddr exp)))
    (if (variable? var)
        (cons (make-define var (map car named-let-exps) named-body)
              (cons var (map cadr named-let-exps)))
        (cons (make-lambda (let-variables exp) (let-body exp))
              (let-exps)))))
